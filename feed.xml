<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="">
  <title>Mike @miked.codes</title>
  <subtitle>Posts by Mike</subtitle>
  <link href="https://miked.codes/feed.xml" rel="self"/>
  <link href="https://miked.codes/"/>
  <updated>Tue, 26 Oct 2021 00:00:00 +0000</updated>
  <id>https://miked.codes/</id>
  <author>
    <name>Mike D</name>
    <email>mdouglas+posts@directive.io</email>
  </author>
  <entry>
    <title>Importing Venmo transactions into YNAB</title>
    <link href="https://miked.codes/blog/importing-venmo-transactions-to-ynab"/>
    <updated>Tue, 26 Oct 2021 00:00:00 +0000</updated>
    <id></id>
    <content xml:lang="en" type="html"><p>When Venmo started shutting down access to its API and You Need a Budget (YNAB) stopped its Direct Import feature for the service, it was left up to the users to figure out how to budget their money moving through Venmo. YNAB wrote a <a href="https://www.youneedabudget.com/how-to-manage-venmo-in-ynab/">blog post</a> about it with some recommendations on how to manage funds and it's that blog post that motivated me to write <a href="https://github.com/mike-douglas/venmo2ynab">venmo2ynab</a>, a small script to help with importing Venmo transactions to YNAB.</p>
<p>This article is about how I use this tool to keep YNAB up to date with activity from my Venmo account. It's free to use so if it's something you'd like to try, read on.</p>
<h2>Who this tool is for</h2>
<p><a href="https://github.com/mike-douglas/venmo2ynab">venmo2ynab</a> is a Python script that converts a Venmo statement to a CSV format suitable for importing into YNAB. It works for people who use Venmo and YNAB based on Option Two in the YNAB blog post <a href="https://www.youneedabudget.com/how-to-manage-venmo-in-ynab/">How to Manage Venmo in YNAB</a>. This tool may be helpful for you if:</p>
<ol>
<li>You're a frequent user of Venmo and you <strong>carry a balance in your account</strong></li>
<li>You've set up your Venmo account in YNAB to function like a checking account</li>
<li>You are comfortable with using the command line ðŸ™‚</li>
</ol>
<p>If you were manually entering your transactions from Venmo into YNAB, this tool may be for you!</p>
<h2>Setting up venmo2ynab</h2>
<p>The <a href="https://github.com/mike-douglas/venmo2ynab#readme">GitHub repo's README</a> has the setup steps that are pretty easy, but I'll modify the installation in this post so that the script is installed globally (feel free to use a <a href="https://docs.python.org/3/library/venv.html">virtualenv</a> if you are comfortable setting that up instead):</p>
<p>First, check out the <a href="https://github.com/mike-douglas/venmo2ynab">repo</a>, then <code>cd</code> to it.</p>
<p>Then in the command line, run:</p>
<pre><code class="language-bash">sudo pip3 install .
</code></pre>
<p>You'll know it's successful when it finishes and when you type <code>venmo2ynab --help</code> in the CLI, you see this:</p>
<pre><code class="language-bash">Usage: venmo2ynab [OPTIONS] [INPUT_FILES]... OUTPUT_FILE
<p>Options:
--help  Show this message and exit.
</code></pre></p>
<h2>Using the script</h2>
<p>Below I'll outline the process that I go through to get my Venmo transactions into YNAB, starting with exporting my Venmo statement from the last month to a file, then running that exported file through the script, and finally importing the <code>.csv</code> file into YNAB.</p>
<h3>Step One: Download your Venmo statement</h3>
<p><a href="https://venmo.com/account/sign-in">Log into Venmo</a>, then go to your statements page:</p>
<figure class=""><img src="https://miked.codes//images/blog/venmo/1-export-statement.png" alt="
    Find Your Statements in the Venmo Sidebar
"><figcaption>
    Find Your Statements in the Venmo Sidebar
</figcaption></figure>
<p>Change the dropdown at the top of the page to &quot;Past 60 days&quot; or whatever timeframe you'd like. The page will update and you'll see the table of transactions further down reflect this time period.</p>
<figure class=""><img src="https://miked.codes//images/blog/venmo/1-go-to-statements.png" alt="
    Export Your Statement from Venmo
"><figcaption>
    Export Your Statement from Venmo
</figcaption></figure>
<p>Click the &quot;Download CSV&quot; button to download a file on to your computer with all of the transactions that you have selected with that dropdown. It'll be called <code>venmo_statement.csv</code>, note where it saves the file (in Mac OS, it puts it in your Downloads folder by default).</p>
<h3>Step Two: Convert your Venmo statement for YNAB</h3>
<p>In this step, you'll use <code>venmo2ynab</code> to turn that downloaded statement to one that can be imported into YNAB. Specifically it follows &quot;Option 2&quot; in the <a href="https://docs.youneedabudget.com/article/921-formatting-csv-file">Formatting a CSV File help article</a> on the YNAB website, combining inflow and outflow into one field and also preserving the payee and memo fields.</p>
<p>Open your terminal and locate the <code>venmo_statement.csv</code> file, and change to the directory:</p>
<pre><code class="language-bash">$ cd ~/Downloads
$ ls
venmo_statement.csv
</code></pre>
<p>Next, run <code>venmo2ynab</code>, providing the Venmo CSV as the first argument and a <strong>new</strong> filename for where you want to save the YNAB-compatible CSV content:</p>
<pre><code class="language-bash">venmo2ynab venmo_statement.csv to_ynab.csv
</code></pre>
<p>If successful, you won't see any output. You can always open up the <code>to_ynab.csv</code> file to make sure everything looks good. On to the final step!</p>
<h3>Step Three: Importing transactions into YNAB</h3>
<p>In <a href="https://app.youneedabudget.com">YNAB</a>, locate your Venmo account and click the &quot;File Import&quot; button and click it. Locate your <code>to_ynab.csv</code> file and upload it (Hint: you can also drag and drop the CSV file into YNAB when your Venmo account is selected!)</p>
<figure class=""><img src="https://miked.codes//images/blog/venmo/2-import-into-ynab.png" alt="
    Import Your Venmo Transactions into YNAB
"><figcaption>
    Import Your Venmo Transactions into YNAB
</figcaption></figure>
<p>You'll be able to preview what's being imported in the next window. It's always worth glancing over it and making sure that Payees and Memos line up. You don't need to change any of the options in the dialog, just click &quot;Import&quot; when you're ready!</p>
<figure class=""><img src="https://miked.codes//images/blog/venmo/2-preview-import.png" alt="
    Preview Your Imported Venmo Transactions
"><figcaption>
    Preview Your Imported Venmo Transactions
</figcaption></figure>
<p>On success, YNAB will tell you how many transactions were imported, and how many were skipped. It's smart enough to skip already-imported transactions, so you can run this process as often as you'd like!</p>
<p>Now you have new transactions to categorize and approve with all of your most recent Venmo transactions imported!</p>
<h2>Conclusion</h2>
<p>I hope this little tool helps someone manage their budgets better with Venmo transactions. As a frequent Venmo user, keeping these transactions updated in YNAB has helped me have better control over my spending with it. If you find this useful or you have some ideas on how to make it better, hit me up on <a href="https://twitter.com/miked">Twitter</a> or feel free to contribute to the <a href="https://github.com/mike-douglas/venmo2ynab">GitHub project</a> yourself (it's free to use and modify!).</p>
<p>Ideally I'd love to automate this process even more, but it looks like the APIs needed to do that do not exist. If you have ideas on how to make this happen automatically without a lot of user interaction, please <a href="https://twitter.com/miked">reach out</a>!</p>
</content>
  </entry>
  <entry>
    <title>Command-line gems that deserve a place in your muscle memory</title>
    <link href="https://miked.codes/blog/"/>
    <updated>Fri, 06 May 2022 00:00:00 +0000</updated>
    <id></id>
    <content xml:lang="en" type="html"><p>If you've been working in terminal for a while you are bound to start developing muscle memory around commands and shell idioms. They're the shortcuts that you can somehow recall from your long-term memory without much effort, burned in there either through repetition or through sheer force of will, that hope to save you time in what you do.</p>
<p>In this post I recall my top command line shortcuts, tidbits that have etched their way into my brain even after moving on from the part of my career where I use them regularly. What are some of yours?</p>
<h2>Search and replace in multiple files</h2>
<pre><code class="language-bash">perl -pi -e 's/SEARCH/REPLACE/g' FILE1 FILE2 ...
</code></pre>
<p>Early in my career I worked in K-12 education services and I had to do a lot of text processing and manual ETL for state reporting. This command has a special place in my heart because Perl was my first language, Â and the brevity of this command has always impressed me. I've moved far on from Perl for daily use, but whenever I need to do a quick search and replace across multiple files I use this little gem. It's often faster than stumbling through VSCode find and replace for me as well. Because of the command-line flags this magic command is known colloquially as the &quot;perl pie.&quot;</p>
<p>The flags broken down do the following:</p>
<ul>
<li><code>-p</code> assume the expression is inside of a loop reading the contents of each file;</li>
<li><code>-i</code> edits the files passed as arguments in place; and</li>
<li><code>-e</code> runs the given expression.</li>
</ul>
<h2>Split delimited input and print out columns</h2>
<pre><code class="language-bash">cat FILE.csv | awk -F',' '{print $2}'
</code></pre>
<p>Although I never went too deep with learning <code>awk</code>, this command embedded itself into my brain when I was working initially as a sysadmin and then as a developer working in insurance. This command works wonders slicing and dicing log files and parsing insurance rate spreadsheets. I know <code>cut</code> is more succinct and probably better suited for this specific purpose, but for some reason this stuck for me.</p>
<p>In <code>awk</code> the <code>-F</code> flag lets you define a field delimiter, and the <code>{...}</code> argument following it is the body of the program to run. <code>awk</code> will split each line of STDIN into numbered columns from <code>$1</code>, <code>$2</code> to <code>$n</code>, and in the example above will print out the second column from the file. The <code>-F</code> flag is even optional; <code>awk</code> will try to split the input on the first delimiter it finds which can make this an even more succinct little command.</p>
<p>I'll often end up with a few of these sandwiched between other commands to transform and tabulate data from large barely structured text input.</p>
<h2>Quick webserver for sharing files</h2>
<pre><code class="language-bash">$ python -mSimpleHTTPServer
# or with python3
$ python3 -mhttp.server
</code></pre>
<p>After I did my time with Perl, I moved to Python. Initially it was a shock: the simplicity of the syntax, the lack of curly braces!? But even in my reporting and text wrangling days <code>python</code> became my goto and I think this command sealed the deal for me. Before we had Airdrop (which admittedly still doesn't always work), this was a super quick way to send files back and forth.</p>
<p>In Python 2.x the <code>SimpleHTTPServer</code> module would create a very lightweight webserver listening on port <code>:8000</code> on your machine, serving everything in the current directory up. I would run this command, then hop over to another machine and browse or <code>curl</code> whatever I needed from it. In Python 3.x this module has been replaced with <code>http.server</code> so I've included it here. I will admit I'm still re-training my brain to use this newer and shorter version, but it will remain a very convenient way to transfer files or create a makeshift dev environment to serve HTML files.</p>
<h2>Counting unique lines from input</h2>
<pre><code class="language-bash">cat FILE | sort | uniq -c
</code></pre>
<p>This one is pretty short but it was especially helpful in my sysadmin days when I was looking through Apache log files and wanted to understand traffic hitting my servers. Used along with the <code>awk</code> command above, I would often use this to understand hosts hitting the server especially hard. This was before the days of structured logging, <code>jql</code>, and more modern log parsers and shippers.</p>
<h2>Quick shell loop</h2>
<pre><code class="language-bash">for x in a b c ; do echo $x ; done
</code></pre>
<p>Although I am a ZSH ride-and-die (and before that TCSH and CSH), Bash is everywhere. Fortunately this syntax also works for ZSH but not those others. I can't quite pinpoint when, but this <em>probably</em> lodged itself into my muscle memory around the time when I used to manage and catalog MP3s by hand. Imagine that!</p>
<p>It's still incredibly useful for running commands or generarting output for multiple things at once where the command may not support multiple arguments. I've also been known to use this where the <code>a b c</code> items in the loop are directories, and the body of the loop <code>cd</code>'d to the directory, did some stuff, and then <code>cd ..</code>. The contents of the loop can be multiple commands, each separated by <code>;</code>.</p>
<h2>Find files in a nested directory</h2>
<pre><code class="language-bash">find ./ -name &quot;*foo*&quot; -exec COMMAND {} \; 
</code></pre>
<p>The <code>find</code> command's arguments always confused me, so I learned just enough to get done the things I needed to for my day to day. When I need to perform more sophisticated searching (using <code>-atime</code> and the like) I'll jump back to the manual. But this became such a go-to for me for many years that it just comes out naturally when I have an inkling to perform an action on a bunch of files that are buried deep in directory structure.</p>
<p>The <code>-name</code> argument takes a wildcard string; if you want to search case-insensitively use <code>-iname</code>. And the <code>-exec</code> flag takes any command, where the <code>{}</code> is the name of the file to be slotted in as an argument. The <code>\;</code> at the end denotes the end of the command, a requirement for <code>find</code>, and for a while was the thing that kept me from using this more often until I burned it into my muscle memory.</p>
<hr>
<p>Hopefully you find some of these useful in your daily meanderings in the terminal like they have for me. If you have other useful commands or snippets of CLI magic that have helped you get things done, reach out on <a href="https://twitter.com/miked">twitter</a>!</p>
</content>
  </entry>
  <entry>
    <title>Keeping plants happy with sensors and automation</title>
    <link href="https://miked.codes/blog/"/>
    <updated>Tue, 24 May 2022 00:00:00 +0000</updated>
    <id></id>
    <content xml:lang="en" type="html"><p>I've been growing my green thumb for a few years and have honed my plant care skills enough to amass a pretty healthy collection of green friends. A goal of mine last year was to finally get more comfortable with electronics, take on a few small projects, and learn a bit about circuit design and electrical components. Being a home automation nerd, I thought it would be fun to do a project that would help support my houseplant hobby.</p>
<p>So I dusted off some old <a href="http://arduino.cc">Arduino</a> boards, and a box of parts I got on sale many years ago (RIP Radio Shack) and set off to learn and build something. <strong>The goal: monitor the moisture level of the soil for my houseplants and alert me when they need watering.</strong></p>
<p>In this post I'll go through the hardware, software, monitoring, and alerting I put together in to keep my little plant sanctuary happy and thriving.</p>
<h2>The big picture</h2>
<p>Home automation has always been a hobby of mine. I have an existing home network with wired and wireless connections throughout my home, as well as a server that functions as both a NAS and environment to run internal services and side projects that come and go. I could host a monitoring platform and a sensor data gathering service easily using this existing infrastructure, and with a few Arduinos with some sensors I could get readings on the moisture level of the plants where the moisture sensors are placed.</p>
<p>This is the diagram of what the finished product looks like:</p>
<figure class="wide"><img src="https://miked.codes//images/blog/plant-sensors/Diagram-for-Plant-Sensors-1.png" alt="
  Sensor, exporter, and monitoring platform setup
"><figcaption>
  Sensor, exporter, and monitoring platform setup
</figcaption></figure>
<p>In broad strokes, this is what happens:</p>
<ol>
<li>Every <strong>X</strong> seconds, the Arduino takes a reading for each of the attached sensors;</li>
<li>It reports the values (and additional metadata) to the Sensor Exporter;</li>
<li>Every <strong>Y</strong> seconds Prometheus collects the exported data from the Sensor Exporter;</li>
<li>There are Grafana Dashboards and Alerts that monitor time-series slices of that data to show graphs and visualizations, and alert via Telegram to me when things are out of the ordinary.</li>
</ol>
<p>I don't have a lot of experience with Arduinos wiring up sensors, so I decided to tackle that first.</p>
<h2>Arduinos and sensors</h2>
<p>I had one <a href="https://www.arduino.cc/en/main/arduinoBoardUno">Arduino Uno</a> from when I was first attempting to get into electronics programming many years ago. I did basic tutorials like making LEDs blink and powering a tiny servo, but that's about the extent of it. Interacting with sensors turned out to be really straightforward, especially with the ones I bought. I purchased these <a href="https://www.diymore.cc/products/2pcs-capacitive-soil-moisture-sensor-v1-2-analog-corrosion-resistant-dc-3-3-5-5v">diymore Capacitive Soil Moisture Sensor</a>s for the project. They're pretty affordable between $11-15 USD, so not a huge financial commitment if the project is a bust or I need to replace a component.</p>
<figure class=""><img src="https://miked.codes//images/blog/plant-sensors/capacitive_soil_sensor.jpeg" alt="
  diymore Capacitive Soil Moisture Sensor
"><figcaption>
  diymore Capacitive Soil Moisture Sensor
</figcaption></figure>
<p>After doing some research on capacitive versus resistive sensors, I went with the capacitive variety for the price and overall lifespan. But what's does &quot;capacitive moisture sensor&quot; mean anyway? I know that a capacitor is essentially a battery (it stores charge), but how that applies to something like a <em>sensor</em>, I had no clue. The tutorial <a href="https://www.switchdoc.com/2020/06/tutorial-capacitive-moisture-sensor-grove/">Using Capacitive Soil Moisture Sensors on the Raspberry Pi</a> on <a href="https://www.switchdoc.com/">SwitchDoc</a> describes it nicely:</p>
<blockquote>
<p>The electrical component known as a capacitor consist of three pieces. Â A positive plate, a negative plate and the space in-between the plates, known as the dielectric.
[...]
A<strong>capacitive moisture sensor works by measuring the changes in capacitance caused by the changes in the dielectric</strong>. It does not measure moisture directly (pure water does not conduct electricity well), Â instead it measures the ions that are dissolved in the moisture[.]</p>
</blockquote>
<p>Capacitive sensors report the energy stored in the soil around the plates of the sensor. When the soil is wet, you see a lower capacitance because water doesn't conduct electricity well. So the more wet the soil, the lower the reading; the more dry the soil the higher the reading.</p>
<h3>Wiring up the sensors</h3>
<p>The next step was wiring up the sensors to an Arduino. I went through a few iterations of this, first starting with an Arduino Uno and an Ethernet Shield, and finally ending up with a much cleaner setup using an <a href="https://www.adafruit.com/product/2999">Adafruit ATWINC1500 WiFi</a> module. Connecting the WiFi module gave me an excuse to fire up my soldering iron, which hadn't gotten any use for many years!</p>
<div class="gallery"><div class="gallery-row">
  <figure class="gallery-image"><img src="https://miked.codes//images/blog/plant-sensors/IMG_1230-Medium.jpeg" alt="
    Final wired Arduino with three sensors and a Wifi module
  "><figcaption>
    Final wired Arduino with three sensors and a Wifi module
  </figcaption></figure>
  <figure class="gallery-image"><img src="https://miked.codes//images/blog/plant-sensors/IMG_1229-Medium.jpeg" alt="
    Moisture sensor placed inside of a plant
  "><figcaption>
    Moisture sensor placed inside of a plant
  </figcaption></figure>
</div></div>
<p>Wiring up the WiFi module and the sensors was pretty easy. I followed the <a href="https://learn.adafruit.com/adafruit-atwinc1500-wifi-module-breakout/wiring-and-test?view=all">Adafruit ATWINC1500 WiFi Breakout tutorial</a> for connecting the wireless sensor to the Uno, and this <a href="https://how2electronics.com/interface-capacitive-soil-moisture-sensor-arduino/">Interface Capacitive Soil Moisture Sensor v1.2 with Ardiuno</a> tutorial for connecting the moisture sensors to the board.</p>
<p>With the hardware out of the way, the next part of the project was well within my comfort zone: writing software.</p>
<h2>Gathering and exporting data</h2>
<p>For my setup I needed to build two software components:</p>
<ol>
<li>A program on the Ardiuno that would read the sensors and send the data somewhere, and</li>
<li>A service somewhere that would record that data and (eventually) export it to Prometheus.</li>
</ol>
<p>To tackle the first part, I fired up the Arduino IDE and started writing code.</p>
<h3>Programming the Arduino Uno</h3>
<p>The Arduno is programmed using a C-like language that is compiled and loaded on to the board via a USB cable.</p>
<p>Reading the moisture sensors used the built-in <code>analogRead(int)</code> function, where the argument passed is the number of the analog pin to which the sensor is connected. Each of my boards had 2-3 sensors attached to it (with more room to expand!), so I knew that each board would be reading and sending multiple values per interval.</p>
<p>Transmitting the sensor data would require connecting to the WiFi which I could do easily with the <a href="https://www.arduino.cc/reference/en/libraries/wifi101/">WiFi101 library</a> included in the IDE. I'd connect to my wireless network and send requests to a RESTful webservice I would set up in the next step.</p>
<p>My code looked like this:</p>
<pre><code class="language-c">#include &lt;SPI.h&gt;
#include &lt;WiFi101.h&gt;
<p>typedef struct {
int input;
char name[10];
} sensor;</p>
<p>sensor sensors[2] = {
{ 0, &quot;soil03&quot; },
{ 1, &quot;soil08&quot; }
};</p>
<p>char ssid[] = &quot;XXX&quot;;
char pass[] = &quot;XXX&quot;;</p>
<p>char host[] = &quot;XXX&quot;;
int port = 9800;</p>
<p>int status = WL_IDLE_STATUS;</p>
<p>WiFiClient client;
IPAddress ipAddress;</p>
<p>char ip[] = &quot;xxx.xxx.xxx.xxx&quot;;</p>
<p>void setup() {
Serial.begin(9600);</p>
<p>// set the pins for the ATWINC1500 Feather
WiFi.setPins(8, 7, 4);</p>
<p>pinMode(4, OUTPUT);
digitalWrite(4, HIGH);</p>
<p>while (status != WL_CONNECTED) {
status = WiFi.begin(ssid, pass);
delay(5000);
}</p>
<p>ipAddress = WiFi.localIP();
sprintf(ip, &quot;%d.%d.%d.%d&quot;, ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
}</p>
<p>void loop() {
for (byte i = 0; i &lt; (sizeof(sensors) / sizeof(sensors[0])); i++) {
int val = analogRead(sensors[i].input);
sendSensorReading(host, port, val, sensors[i].name, ip);
Serial.print(&quot;sent &quot;);
Serial.println(sensors[i].name);
}</p>
<p>delay(10000);
}</p>
<p>void sendSensorReading(char* host, int port, int reading, char* sensor, char* readerIP) {
client.stop();</p>
<p>char buffer[40], payload[100];</p>
<p>sprintf(payload, &quot;{&amp;quot;value&amp;quot;:%d,&amp;quot;labels&amp;quot;:{&amp;quot;sensor&amp;quot;: &amp;quot;%s&amp;quot;, &amp;quot;reader&amp;quot;: &amp;quot;%s&amp;quot;}}&quot;, reading, sensor, readerIP);
Serial.println(payload);</p>
<p>if (client.connect(host, port)) {
client.println(&quot;POST /api/v1/metric/soil_moisture HTTP/1.1&quot;);
client.println(&quot;User-Agent: arduino-ethernet&quot;);
client.println(&quot;Content-Type: application/json&quot;);</p>
<pre><code>sprintf(buffer, &amp;quot;Host: %s&amp;quot;, host);
client.println(buffer);

sprintf(buffer, &amp;quot;Content-Length: %d&amp;quot;, strlen(payload));
client.println(buffer);
client.println();

client.println(payload);
client.println();
</code></pre>
<p>}
}
</code></pre></p>
<p><a href="https://gist.github.com/mike-douglas/96e64274ecb6f8ab4d61d034facf4807">UnoWifiSensorReader.c Gist</a></p>
<p>Neat! My Arduino is now reading the sensors connected to it every 10 seconds and sending it to a service living somewhere on my network. Now let's get to writing that API...</p>
<h3>Sensor exporter API</h3>
<p>I wanted to keep the API lightweight and simple. In short, I needed it to accomplish two things:</p>
<ol>
<li>Record sensor values (with labels) via an HTTP request, and</li>
<li><em>Export</em> those metrics from the same service, so <a href="https://prometheus.io">Prometheus</a> could collect it.</li>
</ol>
<p>First thing's first, let's define the API. Here's a sample HTTP request I'd like to be able to make to this API:</p>
<pre><code class="language-http">POST /api/v1/metric/soil_moisture
User-Agent: arduino-board
Content-Type: application/json
Content-Length: n
<p>{
&quot;value&quot;: 100,
&quot;labels&quot;: {
&quot;sensor&quot;: &quot;01&quot;,
&quot;reader&quot;: &quot;arduino01&quot;
}
}
</code></pre></p>
<p>In the above request, I would expect that a value of <code>100</code> with labels <code>sensor</code> and <code>reader</code> would be stored for the metric named <code>soil_moisture</code>. Each of my sensors would have a different ID associated with them ( <code>01</code>, <code>02</code>, etc) and each would set the hostname/IP of the Arduino doing the reading for debugging. It didn't need persistent storage since Prometheus would house all of that, the API just needed to store <em>the most recent</em> values sent to it for each metric/label combination. Overall this made the API pretty lightweight.</p>
<p>The last thing I needed to do was create an endpoint for exporting metrics. This is the URL that Prometheus will poll every <em>n</em> seconds to record the values stored in the exporter. An example of that output is below:</p>
<pre><code class="language-bash">$ curl http://localhost:9800/metrics
# HELP foo_metric foo_metric
# TYPE foo_metric gauge
soil_moisture{sensor=&quot;01&quot;,reader=&quot;arduino0&quot;} 100
soil_moisture{sensor=&quot;02&quot;,reader=&quot;arduino0&quot;} 302
soil_moisture{sensor=&quot;01&quot;,reader=&quot;arduino1&quot;} 220
</code></pre>
<p>As you can see in the sample there are three values recorded for the <code>soil_moisture</code> each with a different set of labels. It's important to note that this API only knows how to store gauge metrics which are simply a number that can arbitrarily go up and down. You can read more about Prometheus' metric types <a href="https://prometheus.io/docs/concepts/metric_types/">here</a>.</p>
<p>This API is pretty extensible so if I wanted to add a way to store counters, histograms, or quantiles, it wouldn't be too much of a stretch. The API can also be used to export all sorts of data, not just moisture data.</p>
<p>The sensor-exporter project is available on GitHub at <a href="https://github.com/mike-douglas/sensor-exporter">sensor-exporter</a>. For ease of deployment, there's also a docker image hosted on docker hub at <a href="https://hub.docker.com/r/mdouglas/sensor-exporter">mdouglas/sensor-exporter</a>. Feel free to contribute to either of these!</p>
<h2>Monitoring and alerting</h2>
<p>So my sensors are wired up and my little army of Arduinos are deployed, reading 2-3 moisture values from my houseplants every 10 seconds. Those values are shipped off to an instance of the sensor-exporter API running in my network. Finally, I <a href="https://prometheus.io/docs/prometheus/latest/getting_started/">configured Prometheus</a> to collect data from the metrics endpoint of the sensor-exporter every 10 seconds.</p>
<p>Now for the fun part: making pretty charts and graphs, and alerting when moisture levels are low!</p>
<h3>Charts and dashboards</h3>
<p>I set up a dashboard in <a href="https://grafana.com">Grafana</a> with a chart for each sensor (8 currently), showing me the moisture level over 2 days. It looks something like this:</p>
<figure class="wide"><img src="https://miked.codes//images/blog/plant-sensors/sensor_dashboard.png" alt="
  A 2-day view of soil dryness for 4 of my monitored plants.
"><figcaption>
  A 2-day view of soil dryness for 4 of my monitored plants.
</figcaption></figure>
<p>It took some fiddling with the metric query but I landed on the following for all of my sensors:</p>
<pre><code class="language-promql">holt_winters(soil_moisture{sensor=&quot;soil02&quot;}[$__range], .2, .8)
</code></pre>
<p>The <code>holt_winters(v, sf, tf)</code> <a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#holt_winters">function</a> function smoothes the time series out well enough to see the trends over a period of ~12 hours, in my experience. When I bring a new sensor online, it only takes a few minutes of readings for things to level out, but after that it's gold.</p>
<h3>Alerting</h3>
<p>The final piece is alerting. Remember the goal from the beginning of this post? <strong>I want my plants to alert me when they needed watering!</strong> Thankfully Grafana makes this super easy.</p>
<p>I set up an alert for each sensor, so I now have these:</p>
<figure class=""><img src="https://miked.codes//images/blog/plant-sensors/alerts.png" alt="
  My 8 "Water Me" alerts
"><figcaption>
  My 8 "Water Me" alerts
</figcaption></figure>
<p>I would like notifications sent to my mobile devices using Push notifications, and after looking around a bit I found that Telegram has a pretty awesome <a href="https://core.telegram.org/bots">Bot API Tutorial</a>. Telegram sends Push notifications to devices already so this was my free way to receive notifications straight to my devices when a plant needed watering.</p>
<p>Grafana has Telegram support built-in as a <a href="https://grafana.com/docs/grafana/latest/alerting/unified-alerting/contact-points/">contact point</a>, so once I configured that with the right set of keys I was all set. Here's an example of a fired alert and a resolved alert from my Plant Alerts Bot:</p>
<figure class=""><img src="https://miked.codes//images/blog/plant-sensors/telegram_alerts.png" alt="
  Telegram alerts sent from Grafana when a plant needs watering.
"><figcaption>
  Telegram alerts sent from Grafana when a plant needs watering.
</figcaption></figure>
<p>For extra points, I recently bought a <a href="https://tidbyt.com">Tidbyt</a> which is a really cool desktop-sized programmable LED screen. In a few hours I was able to push some code to it that queried Grafana for the status of the alerts to produce a cute little pixel-based visualization. When there is an alert that firing, the leaves of one the plants turns brown. It's the same visualization that's at the top of this post:</p>
<figure class="wide"><img src="https://miked.codes//images/blog/plant-sensors/tidbyt.gif" alt="
  Look at all those happy plants.
"><figcaption>
  Look at all those happy plants.
</figcaption></figure>
<p>This gadget is tons of fun and I'll certainly have more to share about how I'm hacking the Tidbyt in an upcoming post.</p>
<h2>What's next</h2>
<p>Phew! What started out as a way to learn some more about electronics turned into quite a project. Wiring up Arduinos, writing some code, and configuring monitoring and alerting tools. I did learn a lot about electronics, taking many detours to dive into circuits and other related topics along the way. It also gave me the chance to brush up on some other things that I was somewhat familar with but haven't messed around with for a while, namely Prometheus and Grafana.</p>
<p>I worked on this for a few months during my spare time and I continue to tweak things as they come up. I'm still learning the right values to alert on for soil dryness; ambient temperature and sunlight plays a huge part in the moisture values and therefore the alerting thresholds. Not to mention any agitation or moving of the sensor seems to temporarily throw things off. It's been a lot of fun monitoring my plants, the soil, and my watering habits through this system.</p>
<p>I have some other ideas on where to go from here:</p>
<ul>
<li>Box up all the electronics a little more cleanly. The board and the breadboard are just kind of sitting out there and some nice 3d printed boxes would look better put together and provide protection to the components. Any recommendations?</li>
<li>More clean wiring for the sensors. I've extended a few with spare wire for my plants living off the window sill but something shielded and covered would look better and be safer, I think.</li>
<li>Obviously, <em>moar sensors</em>! I have 8 sensors wired up across 3 Arduinos, with a total of 18 analog pins. And I have <strong>a lot</strong> of plants. This is likely the next and easiest step.</li>
</ul>
<p>I hope you enjoyed following this post as much as I did writing it! If you've done something similar, want to do something like this, or just want to chat about it, please hit me up on <a href="https://twitter.com/miked">Twitter</a>!</p>
</content>
  </entry>
  <entry>
    <title>In defense of Productivity Porn</title>
    <link href="https://miked.codes/blog/in-defense-of-productivity-porn"/>
    <updated>Wed, 03 Aug 2022 00:00:00 +0000</updated>
    <id></id>
    <content xml:lang="en" type="html"><p><a href="https://calebschoepp.com/blog/2022/productivity-porn/">Caleb Schoepp's post on Productivity Porn</a> struck a cord with me. Its central argument is that social media, specifically the kind of content that tells you (or insinuates you should) that you need to &quot;do X to become Y,&quot; is unhealthy. It creates a growing feeling of anxiety, loneliness, and distraction. It leads to the exaltation of <em>the other</em>, and it instills on the viewer that everyone is better and you're only ever playing catch-up. And if you're not <em>actively</em> trying to catch up, you're actively choosing failure.</p>
<p>And I 100% agree with this argument that it's bad. But it doesn't <em>have</em> to be.</p>
<p>Look, I doom-scroll just like everyone else. I spend idle moments watching beautiful people live their curated lives on Instagram. I like and retweet funny or informative things on Twitter. And I sometimes read those &quot;7 things every successful manager should start doing <strong>right now</strong>&quot; threads. I might even feel a pang of that anxiety creep in when I do it. But there's so much more out there!</p>
<p>Instead of looking for listicles about productivity, <em>learn about a tool that might make you more productive</em>.</p>
<p>Instead of watching 7 hours of YouTube content on the 19 Best Ways to Organize Your Life, watch a video on Getting Things Done. And Zettelkasten. And Bullet Journaling.</p>
<p>My point is, don't listen to what other people tell you is important, but <em>do listen to them</em>. Don't trust that some VC has all the answers on how to be an entrepreneur. Do they have experience and insight that you don't? Of course. But they are just <em>one</em> opinion of thousands... of millions. You have access to all of those different ideas and you should learn about them.</p>
<p>We have all of human knowledge around us at all times in 2022, and instead of only watching that one video of one physical trainer telling you how you should follow their steps to a better body, watch 5. Watch 10! But then you get to process that information and make your own decision. You don't even have to do anything. Just pursue the knowledge, and you will be better for it.</p>
<p>If you go out there seeking information, learning about other ideas and perspectives, and making yourself a more informed human being, that productivity porn can be very healthy. It all comes down to how you use it.</p>
</content>
  </entry>
  <entry>
    <title>Delayed animations in a ForEach in SwiftUI</title>
    <link href="https://miked.codes/blog/"/>
    <updated>Sat, 26 Nov 2022 00:00:00 +0000</updated>
    <id></id>
    <content xml:lang="en" type="html"><p>I've been working on a side project to add animations in my views to give them more life. A common issue I have is that I need to animate an array of items on to the screen, typically from a <code>@Binding</code>, such that each item starts its animation in sequence rather than in parallel after a short delay. In the end, I want to accomplish an effect like this:</p>
<figure class=""><img src="https://miked.codes//images/blog/delayed-animations/animation.gif" alt="
  Delayed animation of views onAppear in a View
"><figcaption>
  Delayed animation of views onAppear in a View
</figcaption></figure>
<p>Below is a simple extension to accomplish this and a sample View implementing the above animation. Feel free to use it!</p>
<h2>Extension for <code>Animation</code></h2>
<p>The extension is:</p>
<pre><code class="language-swift">import Foundation
import SwiftUI
<p>extension Animation {
func delayWithIndexOf&lt;T: Equatable&gt;(_ item: T, in container: [T], factor: Double) -&gt; Animation {
self.delay(Double(container.firstIndex(of: item) ?? 0) * factor)
}
}
</code></pre></p>
<p>This extension adds a new method to <code>Animation</code> similar to <code>delay(duration:)</code>, but takes two new arguments: the item in the loop, and the container for that item. The delay argument is now a <code>factor</code> of the index of the item in the array, usually the same value as <code>duration</code>. As you can see it's a pretty simple piece of code, and it just returns a new <code>delay</code> animation. It's worth noting that if the item is <em>not</em> in the second argument, it always returns 0 to be safe. The item also needs to conform to the <a href="https://developer.apple.com/documentation/swift/equatable"><code>Equatable</code> protocol</a> to support array lookups.</p>
<p>The result is that you can use this new method in place of <code>delay</code> inside of a loop when you want to delay an animation by a factor of the index of the item in the array. Simply copy this to a file in your project, and you can start using it immediately.</p>
<h2>How to use <code>delayWithIndexOf</code></h2>
<p>The following is an example that starts an animation when the view shows, animating in each of the subviews on a delay of 0.2 seconds after the previous one:</p>
<pre><code class="language-swift">import SwiftUI
<p>struct ExampleView: View {
@State private var scaleFactor = 0.0
@State private var words = [&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;]</p>
<pre><code>var body: some View {
    HStack {
        ForEach(words, id: \.self) { word in
            Text(word)
                .padding()
                .foregroundColor(.white)
                .background(.pink)
                .clipShape(RoundedRectangle(cornerRadius: 10.0))
                .scaleEffect(scaleFactor)
                .animation(
                    .spring()
                        .delayWithIndexOf(
                            word,
                            in: words,
                            factor: 0.2
                        ),
                    value: scaleFactor
                )
        }
    }
    .onAppear {
        withAnimation(.spring()) {
            scaleFactor = 1.0
        }
    }
}
</code></pre>
<p>}</p>
<p>struct ExampleView_Previews: PreviewProvider {
static var previews: some View {
ExampleView()
}
}
</code></pre></p>
<p>As you can see the new method fits right in with the declarative approach for defining animation behaviors and allows you to accomplish that staggered animation for items in a <code>ForEach</code> in a View.</p>
<p>Enjoy!</p>
</content>
  </entry>
</feed>
